library(forecast)
library(leaps)
library(Hmisc)
library(dplyr)
library(ggplot2)
library(gains)
setwd("C:/Users/Akshay Koul/Desktop/UTD/BA with R/Project/airbnb")
getwd()

airbnb.df <- read.csv("Boston preprocessedN2.csv")
View(airbnb.df)


# partition the data 
set.seed(1234)  
numberOfRows <- nrow(airbnb.df)
train.index <- sample(numberOfRows, numberOfRows*0.7)  
train.df <- airbnb.df[train.index,]
valid.df <- airbnb.df[-train.index,]
View(train.df)

#using stepwise eliminations
air.lm<-lm(Price ~ .,data=train.df)

#Forward Model
air.forw<-step(air.lm,direction="forward")
summary(air.forw)
air.forw.pred<-predict(air.forw,valid.df)
accuracy(air.forw.pred,valid.df$Price)


air.back<-step(air.lm,direction="backward")
summary(air.back)
air.back.pred<-predict(air.back,valid.df)
accuracy(air.back.pred,valid.df$Price)


air.both<-step(air.lm,direction="both")
summary(air.both)
air.both.pred<-predict(air.back,valid.df)
accuracy(air.both.pred,valid.df$Price)

#1 (backward best fit)
air.final.lm<-lm(Price ~ host_response_time_within.an.hour + 
                   host_total_listings_count + 
                   room_type_num + 
                   accommodates + 
                   bathrooms + 
                   bedrooms + 
                   Carbon.monoxide.detector + 
                   TV.Cable.TV +
                   Wifi.Internet + 
                   Heating + 
                   Essentials + 
                   cleaning_fee + 
                   number_of_reviews,  data=train.df 
)
summary(air.final.lm)
air.final.predict<-predict(air.final.lm,valid.df)
accuracy(air.final.predict,valid.df$Price)





#Lift Charts

#Forward Model
gain1 <- gains(valid.df$Price, air.forw.pred)

price1 <- valid.df$Price
plot(c(0,gain1$cume.pct.of.total*sum(price1))~c(0,gain1$cume.obs),
     xlab="# cases", ylab="Cumulative Price", main="Lift Chart", type="l")
lines(c(0,sum(price1))~c(0,dim(valid.df)[1]), col="gray", lty=2)

barplot(gain1$mean.resp/mean(price1), names.arg = gain1$depth,
        xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart (Forward)")

#Backward Model(Final)
gain2 <- gains(valid.df$Price, air.final.predict)

price2 <- valid.df$Price
plot(c(0,gain2$cume.pct.of.total*sum(price2))~c(0,gain2$cume.obs),
     xlab="# cases", ylab="Cumulative Price", main="Lift Chart (Final)", type="l")
lines(c(0,sum(price2))~c(0,dim(valid.df)[1]), col="gray", lty=2)

barplot(gain2$mean.resp/mean(price2), names.arg = gain2$depth,
        xlab = "Percentile", ylab = "Mean Response", main = "Decile-wise lift chart (Final)")


#Predicted Vs Actual
#Backward (Final)
residuals <- valid.df$Price - air.final.predict
squaredResiduals <- residuals*residuals
df <- data.frame("Predicted" = air.final.predict, "Actual" = valid.df$Price,
                 "Residual" = residuals, "Squared Residuals" = residuals*residuals)
rmse <- sqrt(mean(df$Squared.Residuals))

df <- df[order(-df$Actual),] 

df$bin = as.numeric(cut2(df$Actual, g = 21))
table(df$bin)

bin_stats = df %>%
  group_by(bin) %>% summarise(mean_Actual = mean(Actual), mean_Predicted = mean(Predicted), min_Actual = min(Actual), min_Predicted = min(Predicted), max_Actual = max(Actual), max_Predicted = max(Predicted) )

#plot residuals to examine
hist(df$Residual, breaks = 20, xlab = "Residuals", main = "")
p1<- ggplot(bin_stats, aes(bin)) + 
  geom_line(aes(y = bin_stats$mean_Predicted, color ="Predicted Price" )) + 
  geom_line(aes(y = bin_stats$mean_Actual, color = "Actual Price")) 

p1



